// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ñ–µ–µ–Ω –∏–∑ JSON —Ñ–∞–π–ª–∞
export const fetchCoffeeShops = async () => {
  try {
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π super_list.json, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π
    let response = await fetch('/super_list.json');
    let dataSource = 'super_list.json';
    if (!response.ok) {
      console.log('super_list.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º coffeeShops.json');
      response = await fetch('/coffeeShops.json');
      dataSource = 'coffeeShops.json';
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
      }
    } else {
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ super_list.json');
    }
    
    const data = await response.json();
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—Ñ–µ–µ–Ω –∏–∑ ${dataSource}:`, data.length);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const transformedData = data.map(shop => {
      const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
      const today = days[new Date().getDay()];
      const todayHours = shop.workingHours?.[today];
      let hours = null;
      if (todayHours && todayHours !== 'null') {
        try {
          // –î–µ–ª–∏–º –ø–æ –ª—é–±–æ–º—É —Ç–∏—Ä–µ: –¥–µ—Ñ–∏—Å, –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ, –∫–æ—Ä–æ—Ç–∫–æ–µ —Ç–∏—Ä–µ
          const [openRaw, closeRaw] = todayHours.split(/\s*[‚Äì‚Äî-]\s*/);
          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
          const convertTo24Hour = (timeStr) => {
            // –ï—Å–ª–∏ —É–∂–µ 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if (/^\d{2}:\d{2}$/.test(timeStr.trim())) return timeStr.trim();
            // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç 7:00 AM –∏–ª–∏ 8:00 PM
            const match = timeStr.trim().match(/(\d{1,2}):(\d{2})\s*([AP]M)/i);
            if (!match) return null;
            let [_, h, m, period] = match;
            h = parseInt(h, 10);
            m = parseInt(m, 10);
            if (period.toUpperCase() === 'PM' && h !== 12) h += 12;
            if (period.toUpperCase() === 'AM' && h === 12) h = 0;
            return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;
          };
          const open24 = convertTo24Hour(openRaw);
          const close24 = convertTo24Hour(closeRaw);
          if (open24 && close24) {
            hours = `${open24}‚Äì${close24}`;
          } else {
            hours = null;
          }
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Å–æ–≤ –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏:', shop.name, todayHours);
          hours = null;
        }
      }
      
      return {
        ...shop,
        hours: hours,
        rating: shop.rating || 0,
        reviews: shop.reviews || 0,
        neighborhood: shop.borough || 'Unknown',
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ super_list.json
        wave: shop.ai_classification?.wave || 'not defined',
        description: shop.descriptionData?.description || shop.description || '',
        // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á–∏ descriptionBlocks –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        descriptionBlocks: shop.descriptionData?.descriptionBlocks ? {
          'Location & Atmosphere': shop.descriptionData.descriptionBlocks.locationAtmosphere,
          'Philosophy & Sourcing': shop.descriptionData.descriptionBlocks.philosophySourcing,
          'Equipment & Technique': shop.descriptionData.descriptionBlocks.equipmentTechnique,
          'Recommendation': shop.descriptionData.descriptionBlocks.recommendation
        } : {},
        descriptionAuthor: shop.descriptionAuthor || ''
      };
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ñ–µ–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    if (transformedData.length > 0) {
      console.log('üîç –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–æ–π –∫–æ—Ñ–µ–π–Ω–∏:', {
        name: transformedData[0].name,
        wave: transformedData[0].wave,
        hasDescription: !!transformedData[0].description,
        hasDescriptionBlocks: !!transformedData[0].descriptionBlocks,
        descriptionBlocksKeys: Object.keys(transformedData[0].descriptionBlocks || {}),
        descriptionAuthor: transformedData[0].descriptionAuthor
      });
    }
    
    return transformedData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ñ–µ–µ–Ω:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return [];
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const coffeeShops = [];